【WordPress化 手順書】✅大項目 ⭕️中項目 🔸小項目 🔵品質確認項目  ⭐️スニペット登録

0.環境設定(「Local」,「MAMP」によるローカルサイト立ち上げ )
1.WP管理画面での初期設定
  ✅日本語化
    ⭕️「設定→日本語化」
  ✅パーマリンク設定
    ⭕️「設定→パーマリンク設定→投稿名」を選択
  ✅必要なプラグインの導入と設定
    ⭕️Notion「拡張機能&プラグイン」参照
2.各種テーマファイルの作成(app→public→wp-content→themes⇨テーマ名)
  ✅index.php
    ⭕️下記を記述
      🔸<?php get_header(); ?>
      🔸<?php get_footer(); ?>
      🔸<?php get_sidebar(); ?>
  ✅style.css
    ⭕️下記を記述
      /*
      Theme Name: ⚪︎⚪︎
      */
  ✅functions.php
    ⭕️CSS/JS/jQuery読み込み
      ⭐️登録名「pp_func-script」
        ※設定後、header.php内(もしくはfooter.php内)のCSS/JS/JQのパスを削除
          function my_script_init() {
            wp_enqueue_style('fontawesome', 'https://use.fontawesome.com/releases/v5.8.2/css/all.css', array(), '5.8.2', 'all');
            wp_enqueue_style('my', get_template_directory_uri() . '/css/style.css', array(), filemtime( get_theme_file_path( 'css/style.css' )), 'all');
            wp_enqueue_script('my', get_template_directory_uri() . '/js/script.js', array( 'jquery' ), filemtime( get_theme_file_path( 'js/script.js' )), true);
            if (is_single()) {
              wp_enqueue_script("sns", get_template_directory_uri() . "/js/sns.js", array("jquery"), filemtime(get_theme_file_path('js/sns.js')), true);
            }
          }
          add_action("wp_enqueue_scripts", "my_script_init");
  ✅header.php
    ⭕️</head>の前に <?php wp_head(); ?>
  ✅footer.php
    ⭕️</body>の前に <?php wp_footer(); ?>
  ✅sidebar.php
    ⭕️上記にて必要コード確認後、テーマへの反映を確認
    ⭕️テーマフォルダまでのパスを動的なものに変換
      🔸src="./img/
        ⇩
      🔸src="<?= get_template_directory_uri(); ?>/img/
      ※rel="icon"も同様に

      🔸srcset="./img
        ⇩
      🔸srcset="<?= get_template_directory_uri(); ?>/img/
      ※rel="icon"も同様に
3.各種テンプレートファイルの作成
  ✅single.php
  ✅archive.php
    -category.php
    -tag.php
    -data.php
  ✅page.php
  ✅search.php
  ✅404.php
    ⭕️作成後、上記の表示確認を実施
      🔸各テンプレートファイルに「<?= "ファイル名"; ?>」を記述し、表示確認
        ・page.php       新規固定ページを追加   ⇨ 表示確認
        ・single.php     新規投稿を追加        ⇨ 表示確認
        ・archive.php    カテゴリー           ⇨ 表示確認
          -category.php
          -tag.php
          -date.php     http://末尾に「/2024/」のように日付を入れる
            ※上記を先に作成すると、「archive.php」より優先される為、注意
        ・404            URL末尾に「aaaaa」   ⇨ 表示確認
        ・search         URL末尾に「?s=aaaaa」⇨ 表示確認
4.トップページ(index.php/front-page.php)の編集
  ✅「functions.php」でthumbnailの有効化
      ⭐️「pp_func-setup」で登録
        function my_setup() {
          add_theme_support('post-thumbnails');
          add_theme_support('automatic-feed-links');
          add_theme_support('title-tag');
          add_theme_support('html5', array('comment-list', 'comment-form', 'search-form', 'gallery', 'caption', 'style', 'script'));
        }
        add_action("after_setup_theme", "my_setup");
  ✅【共通作業】を参考にテンプレート化
  ✅ナビメニュー登録
5.個別投稿(single.php)の編集
  ✅エディタ上で個別投稿記事の作成
  ✅【共通作業】を参考にテンプレート化
6.アーカイブ(archive.php)の編集
  ✅WP管理画面から「カテゴリー/タグ」の編集⇨各投稿に割り当て
  ✅【共通作業】を参考にテンプレート化
    ⭕️テンプレートファイル別にタイトル/説明文を取得
      🔸カテゴリー/タグ名 ⇨ the_archive_title()
      🔸説明文          ⇨ the_archive_description()
7.固定ページ(page.php)の編集
  ✅エディタ上で固定ページの作成
  ✅【共通作業】を参考にテンプレート化
8.サイドバー(sidebar.php)の編集
  ✅下記どちらかの方法でサイドバーを作成
    ⭕️ウィジェットに直書き
      🔸「functions.php」で、ウィジェットの登録(有効化)
          ※nameとidさえ異なれば、幾つでも登録可能
            function my_widget_init() {
            register_sidebar(
              array(
                'name' => 'サイドバー', // 表示するエリア名
                'id'   => 'sidebar', // id
                'before_widget' => '<div id="%1$s" class="widget %2$s">',
                'after_widget'  => '</div>',
                'before_title'  => '<div class="widget-title">',
                'after_title'   => '</div>'
              )
              );
            }
            add_action('widgets_init', 'my_widget_init');
      🔸「WP管理画面⇨外観⇨ウィジェット」でウィジェットを追加
      🔸sidebar.phpに下記を追加(VSコードとウィジェットの紐付け)
        ※''の中はウィジェットのid名
    	  <?php if (is_active_sidebar('sidebar')) : ?>
	  	  	<?php dynamic_sidebar('sidebar'); ?>
	  	  <?php endif; ?>
      🔸下記プラグインの導入
        ・人気記事  ⇨「WordPress Popular Posts」
        ・新着記事  ⇨「Recent Posts Widget Extended」
      🔸プロフィール、アーカイブウェジットの作成  ※デイトラDay(17)動画参照
      🔸その他、プロフィール、検索、アーカイブや検索も追加して並び順を変える
    ⭕️VSコードに直書き
      🔸検索フォームの作成
        ・searchのaction属性を"#"から"<?= home_url('/'); ?>"に変更
        ・検索フォーム用のテンプレートを作成(searchform.php)
        ・「search.php」から、「searchform.php」を呼び出し
           <?php get_serch_form(); ?>
      🔸下記プラグインの導入
        ・人気記事  ⇨「WordPress Popular Posts」
          ※使用例
            <?php
	  	      if (function_exists('wpp_get_mostpopular')) {
	  	      	wpp_get_mostpopular(
	  	      		array(
	  	      			'limit' => 5,
	  	      			'range' => 'last24days',
	  	      			'thumbnail_width' => 680,
	  	      			'thumbnail_height' => 400,
	  	      			'stats_views' => 0,
	  	      			'wpp_start' => '<div class="wpost-items m_ranking">',
	  	      			'wpp_end' => '</div>',
	  	      			'post_html' => '<div class="wpost-item">
	  	      		<div class="wpost-item-img">{thumb}</div>
	  	      		<div class="wpost-item-body"><div class="wpost-item-title">{title}</div></div>
	  	      		</div>'
	  	      		)
	  	      	);
	  	      }
	  	      ?>
        ・新着記事  ⇨「Recent Posts Widget Extended」
          ・WPのテンプレートタグ "<?= do_shortcode(); ?>" の引数に、RPWEのショートコードを記載
          ※使用例
            <?= do_shortcode('[rpwe thumb_width="680" thumb_height="400" date="false" styles_default="false"]'); ?>
          ※上記をサブループで再現する場合
			      <div class="wpost-items">
			      	<?php
			      	$args = array(
			      		'post_type' => 'post',
			      		'posts_per_page' => 5,
			      		'order_by' => 'date',
			      		'order1' => 'DESC',
			      	);
			      	$recent_query = new WP_Query($args);
			      	if ($recent_query->have_posts()) :
			      		while ($recent_query->have_posts()) :
			      			$recent_query->the_post();
			      	?>
			      			<a class="wpost-item" href="<?php the_permalink(); ?>">
			      				<div class="wpost-item-img">
			      					<?php if (has_post_thumbnail()) : ?>
			      						<?php the_post_thumbnail(); ?>
			      					<?php else : ?>
			      						<img src="<?= get_template_directory_uri(); ?>/img/entry3.png" alt="">
			      					<?php endif; ?>
			      				</div>
			      				<div class="wpost-item-body">
			      					<div class="wpost-item-title"><?php the_title(); ?></div>
			      				</div>
			      			</a>
			      	<?php endwhile;
			      	endif;
			      	wp_reset_postdata(); ?>
			      </div>
      🔸アーカイブの作成
        ・ulの中に下記のコードを記述
          ※$args内が初期値の場合は省いてもOK
            <?php
              $args = array(
                'type' => 'monthly',
                'limit' => '',
                'format' => 'html',
                'before' => '',
                'after' => '',
                'show_post_count' => false,
                'echo' => 1,
                'order' => 'DESC',
                'post_type' => 'post'
              );
            ?>
            <?php wp_get_archives(); ?>
9.エラー表示ページ(404.php)の編集
  ✅【共通作業】を参考にテンプレート化
10.検索結果表示ページ(search.php)の編集
  ✅【共通作業】を参考にテンプレート化
    ⭕️検索ワードの表示
      <?php the_search_query(); ?>
    ⭕️トータルヒット件数の表示
      <?= $wp_query->found_posts; ?>
      ※使用例
        <h1 class="archive-title m_search"><span>"<?php the_search_query(); ?>"</span>の検索結果：<?= $wp_query->found_posts; ?>件</h1><!-- /archive-title -->
    ⭕️検索結果から固定ページを除外
      🔸functions.phpに下記を記述
        function my_posts_search($search, $wp_query) {
          // 検索結果ページ・メインクエリ・管理画面以外の3つの条件が揃った場合
          if ($wp_query->is_search() && $wp_query->is_main_query() && !is_admin()) {
            // 検索結果を投稿タイプに絞る
            $search .= " AND post_type = 'post' ";
            return $search;
          }
          return $search;
        }
        add_filter('posts_search', 'my_posts_search', 10, 2);
11.カスタム投稿ページの作成
  ✅プラグイン「Custom Post Type UI」を使用
  ✅カスタム投稿/カスタムタクソノミーを作成
    ⭕️スラッグ、ラベル（複数形、単数形）を指定
    ⭕️「アーカイブあり」を「True」にする
    ⭕️階層⇨true(category)、false(tag)
    ※管理画面でのカラム表示、クイック編集を有効化しておく
  ✅各種テンプレートファイルの作成
    ⭕️archive-"カスタム投稿名".php    ・・・  アーカイブ(全ての投稿)
      🔸カスタム投稿タイプ一覧へのリンクの作成（hrefに書きを記述）
        href="<?= get_post_type_archive_link('work'); ?>">
      🔸タクソノミーの表示 ('genre'タクソノミーを取得)
          <div class="genre-nav">
            <div class="genre-nav-link"><a class="is-active" href="<?= get_post_type_archive_link('work'); ?>">すべて</a></div>
            <?php $genre_terms = get_terms('genre', array('hide_empty' => false)); ?>
            <?php foreach ($genre_terms as $genre_term) : ?>
              <div class="genre-nav-link"><a href="<?= get_term_link($genre_term, 'genre'); ?>"><?= $genre_term->name; ?></a></div>
            <?php endforeach; ?>
          </div><!-- /genre-nav -->
      🔸タクソノミー名を取得
          <?= get_the_terms(get_the_ID(), 'genre')[0]->name; ?>
          ※'genru'カテゴリーのIDに紐づいたターム情報を取得し、名前を表示
      🔸ページネーション(template.partsから再利用)の表示
    ⭕️single-"カスタム投稿名".php     ・・・  個別投稿
      🔸ループの作成
      🔸開いている現在のページのターム情報を取得
        <?php $genre_term = get_the_terms(get_the_ID(), 'genre')[0]; ?>
      🔸タクソノミー一覧(例:web)へのリンクを反映
        <?= get_term_link($genre_term, 'genre'); ?>
      🔸タクソノミー名の反映
        <?= $genre_term->name; ?>
      🔸カスタム投稿一覧(例:work)へのリンクを反映
        <?= get_post_type_archive_link('work'); ?>
    ⭕️taxonomy-"カスタムタクソノミー名".php  ・・・  ターム別一覧
      🔸<?= is_post_type_archive('work'); ?>
        ⇨現在開いているページの投稿タイプが'work'であれば"true"を返す
      🔸get_queried_object()->slug
        ⇨現在開いているページのスラッグ名を取得
      🔸$genre_term->slug
        ⇨ループ内における各タームのスラッグ名を取得
          <div class="genre-nav-link">
            <a class="<?= (is_post_type_archive('work')) ? 'is-active' : ''; ?>" href="<?= get_post_type_archive_link('work'); ?>">すべて</a>
          </div>
          <?php $genre_terms = get_terms('genre', array('hide_empty' => false)); ?>
          <?php foreach ($genre_terms as $genre_term) : ?>
            <div class="genre-nav-link">
              // 下記２パターンの内どちらか
              <a class="<?= (is_tax('genre', $genre_term->slug)) ? 'is-active' : ''; ?>" href="<?= get_term_link($genre_term, 'genre'); ?>"><?= $genre_term->name; ?></a>
              <a class="<?= get_queried_object()->slug === $genre_term->slug ? 'is-active' : ''; ?>" href="<?= get_term_link($genre_term, 'genre'); ?>"><?= $genre_term->name; ?></a>
            </div>
          <?php endforeach; ?>
  ✅【共通作業】を参考にテンプレート化
  ✅(必要であれば)メニューにカスタム投稿を追加
12.カスタムフィールドによる管理の簡易化
  ✅プラグイン「Advanced Custom Fields」を使用
  ✅カスタムフィールドにフィールドグループを作成
  ✅VSコード上にカスタムフィールドの内容を反映
    ⭕️コードエディタ上で下記を記載
      <?php the_field('フィールド名'); ?>
    ⭕️記入の有無で条件分岐させる場合
      <?php
        $overview = get_field('overview');
        if (mb_strlen($overview, 'UTF-8') > 40) {
          $trimmed_overview = mb_substr($overview, 0, 40, 'UTF-8') . '...[続きを読む]';
        } else {
          $trimmed_overview = $overview;
        }
      ?>
      ※overviewはフィールド名
13.サイトの軽量化
  ✅キャッシュの削除
    ⇨functions.phpを書き換え
    ※CSS、JSのバージョンを変更
      filemtime( get_theme_file_path( 'js/script.js' ))
  ✅画像の圧縮
14.品質確認（本番環境前）
  ✅不要なプラグインの削除
  ✅不要なテーマの削除（本テーマに異常があった場合に備え、1つは予備として残しておく）
  ✅WPの一般設定確認（サイトタイトル、キャッチフレーズの設定）
  ✅投稿・固定ページ等のサンプルページの削除
  ✅プライバシーポリシーの確認（page-privacy.php）
  ✅お問い合わせフォームの確認（page-contact.php）
  ✅サムネイル画像のサイズ設定（小・中⇨幅0/高さ0、大⇨幅800/高さ0）
15.本番環境への移行
  ✅Xserverでサブドメインを取得
  ✅Wordpress簡単インストールを選択
  ✅サブドメインの取得
  ✅WordPress簡単インストール
  ✅Basic認証の設定
  ✅ローカル環境のDBへアクセス
    ※「Local」であれば、DataBase⇨OpenAdminerEvo
  ✅DBをインポート
  ✅上記のsqlファイルの「siteurl」「home」にある'http://localhost/~~'を取得したサブドメイン名に変更
  ✅sqlファイルを圧縮
  ✅Xserverの管理画面から、phpMyAdminへアクセス
  ✅エクスポートから、上記のsql圧縮ファイルをアップロード
    ⇨データベースの移設完了
  ✅FileZillaを開く
  ✅「Wordpressの教科書」P355〜を参考に、themes、plugins、uploadsを上書き
    ⇨WPファイルの移設完了
  ✅phpMyAdminから、IDとPASSを変更(wp_users)
    ※パスワードは必ずMD5にすること
  ✅上記完了後、XserverのWP簡単インストールから対象のページへアクセス
  ✅ページが表示されるかどうか確認
16.最終品質確認（本番環境後）
  ✅WPのURLが設定したドメインに正しくインストールされているか？（URLが同一か？）
  ✅URLがhttps://から始まっているか？
  ✅WPニックネーム（初期はログインID）の変更
  ✅テーマの有効化（表示されない場合は、LocalのDBが本番環境へ正しくインポートできているか確認）
  ✅Googleアナリティクス、Googleサーチコンソールとの連携
    ⭕️Googleアナリティクスの登録⇨https://www.caliberelectronics.com/google-analytics/
    ⭕️Search Console⇨https://www.caliberelectronics.com/free-domain-for-server/

17.その他
⓪ループ処理例
  ✅メインループ
    例）投稿の数(the_post())だけ「記事内容」を表示する
	  <?php if (have_posts()) : ?>
	  	<?php while (have_posts()) : ?>
	  		<?php the_post(); ?>
        //記事内容//
      <?php endwhile; ?>
	  <?php endif; ?>
  ✅サブループ                                  ※デイトラDay(14)参照
    例）同じカテゴリに属する投稿（現在のページを除く）をランダムで８件表示
    <?php
      if (has_category()) {
        $cat_ids = array();
        $post_cats = get_the_category();
        foreach ($post_cats as $cat) {
          $cat_ids[] = $cat->term_id;       //所属カテゴリーのIDリスト
        }
      }
      $args = array(
        'post_type' => 'post',              // 投稿タイプ
        'posts_per_page' => '8',            // ８件を取得
        'post__not_in' => array($post->ID), // 表示中の投稿を除外
        'category__in' => $cat_ids,         // この投稿と同じカテゴリーに属する投稿の中から
        'orderby' => 'rand'
      );
      $the_query = new WP_Query($args);
      if ($the_query->have_posts()) :
        while ($the_query->have_posts()) : $the_query->the_post();
    ?>
        // ループする本文//
    <?php endwhile; endif; ?>
    <?php wp_reset_postdata(); ?>
①パンくずリストの作成                            ※デイトラDay(12)参照
  ✅「BreadCrumbNavxt」をインストール
  ✅パンくず部分を書き換え
    ⭕️<?php bcn_display(); ?>
       <?php if (function_exists('bcn_display')) : ?>
         <!-- breadcrumb -->
         <div class="breadcrumb">
           <?php bcn_display(); ?>
         </div><!-- /breadcrumb -->
       <?php endif; ?>
       ※パンくず区切り文字：<i class="fas fa-angle-right"></i>
        ⇨プラグインの設定で変更可能
②ページネーションの作成                          ※デイトラDay(10)参照
  <?php if (paginate_links()) : ?> //ページネーションがあれば
		<!-- pagination -->
		<div class="pagination">
	    <?=
        paginate_links(
          array(
            'end_size' => 1,
            'mid_size' => 1,
            'prev_next' => true,
            'prev_text' => '<i class="fas fa-angle-left"></i>',
            'next_text' => '<i class="fas fa-angle-right"></i>',
          )
        );
	    ?>
     </div><!-- /pagination -->
	<?php endif; ?>
  【上記解説】
    ⭕️'end_size' => 1,       前へのリンク数 デフォルトは1 両端
                              例)1のとき 1 ... ⑤ ... 10
                              例)2のとき 1 2 ... ⑤ ... 9 10
    ⭕️'mid_size' => 1,       後へのリンク数 デフォルトは2 両側
                              例)1のとき 1 ... 4 ⑤ 6 ... 10
                              例)2のとき 1 ... 3 4 ⑤ 6 7 ... 10
    ⭕️'prev_next' => true,   prev/nextの矢印を表示
③ピックアップ記事                               ※デイトラDay(16)参照
  ✅使用例:トップページ
  	<?php $pickup_ids = array(84, 85, 86); ?>
		  <?php
		  $args = array(
		  	'post_type'     => 'post',
		  	'post__in'      => $pickup_ids,
		  	'posts_per_page' => 3,
		  );
		  $pickup_query = new WP_Query($args);
		  if ($pickup_query->have_posts()) :
		  	while ($pickup_query->have_posts()) :
		  		$pickup_query->the_post();
		?>
      // ループする本文 //
    <?php endwhile; endif; wp_reset_postdata(); ?>
④ショートコードによるエディタ内でのパーツの使い回し   ※デイトラDay(21~22)参照
  ✅「functions.php」で、ショートコードの有効化
    ※例)'btn'というショートコードの作成
      function my_shortcode($attrs, $content = '') {
        return '<div class="entry-btn"><a class="btn" href="' . $attrs['link'] . '">' . $content . '</a></div>';
      }
      add_shortcode('btn', 'my_shortcode');
  ✅エディタでショートコードの使用（個別の投稿等に使用したい場合等）
    ⭕️「管理画面⇨投稿⇨ショートコード」
    ⭕️例）サイト遷移ボタンを表示
      [btn link="https://google.com"]Googleへ[/btn]
      ※"link=..."が第1引数として$attrに渡され、"Googleへ"が第2引数として$contentに渡される
  ✅ブロックのパターン化("パターンを作成"を選択)
  ✅VSコードでショートコードの使用（全ての投稿ページで使用したい場合等）
    ⭕️例）全ての投稿の最後に”お問い合わせボタンを表示”
      <?= do_shortcode("[btn link='https://www.google.co.jp/']お問い合わせ[/btn]"); ?>
  ✅検索フォームのショートコード化
    ⭕️「functions.php」で、ショートコードの有効化
      ※文字列として返すために引数はfalseを指定
        function my_searchform_shortcode($attrs, $content = '') {
          return get_search_form(false);
        }
        add_shortcode('search-form', 'my_searchform_shortcode');
    ⭕️「WP管理画面⇨外観⇨ウィジェット」の検索フォーム箇所に下記のショートコードを記載
      [search-form]
    ⭕️「sidebar.php」に下記を記述
      <?php
			  if (is_active_sidebar('sidebar')) {
			  	dynamic_sidebar('sidebar');
			  }
			?>
⑤関連記事の表示                                 ※デイトラDay(13~14)参照
  (single-work.php)
  <?php
    $related_query = new WP_Query(
      array(
        'post_type' => 'work', // 投稿タイプを「制作実績」に設定
        'posts_per_pages' => 3, // 表示する記事数を3に設定
        'post__not_in' => array(get_the_ID()), // このページで表示している投稿を除外
        'tax_query' => array( // タクソノミーのクエリを設定
          array(
            'taxonomy' => 'genre', // タクソノミーを「ジャンル」に設定
            'field' => 'term_id', // タームのフィールドを「term_id」に設定
            'terms' => wp_get_post_terms(get_the_ID(), 'genre', array('fields' => 'ids')) // この投稿に関連するジャンルのIDを取得して設定
          )
        )
      )
    );
  ?>
⑥メニュー(global,drawer,footer)の作成・表示      ※デイトラDay(11)参照
  ✅「functions.php」で、メニューの有効化
      ⭐️snipet・・・my_setup()⇨「pp_func-menu」で登録してある
        function my_menu_init() {
          register_nav_menus(
            array(
              'global' => 'ヘッダーメニュー',
              'drawer' => 'ドロワーメニュー',
              'footer' => 'フッターメニュー',
            )
          );
        }
        add_action('init', 'my_menu_init');
  ✅WP管理画面⇨外観⇨メニューより、各メニュー項目の設定
  ✅各メニューコードを下記のように書き換え
    <?php
      wp_nav_menu(
        array(
          'depth' => 1,
          'theme_location' => 'global',
          'container' => false,
          'menu_class' => 'header',
        )
      );
    ?>
    【上記解説】
      ⭕️'depth' => 1,                   階層の深さを指定
      ⭕️'theme_location' => 'global',   メニューの場所を指定
      ⭕️'container' => false,           不要なdivタグを削除
      ⭕️'menu_class' => 'header',       メニューのクラスを指定
  ✅メニューに制作実績を追加（ヘッダーメニューに追加）
    ・WP管理画面⇨外観⇨メニュー⇨制作実績⇨全て表示⇨制作実績一覧にチェック
⑦サイトタイトル & サブタイトルの表示(header.php)   ※デイトラDay(11)参照
  ✅トップページの場合は「h1」、それ以外は「div」の場合
    ※タイトル/サブタイトルは、「WP管理画面⇨設定⇨一般」で設定
      <?php if (is_front_page()) : ?> //トップページの場合
          <h1 class="header-logo">
            <a href="<?php echo home_url('/'); ?>">
              <?php bloginfo('name'); ?>
            </a>
          </h1>
      <?php else : ?>
          <div class="header-logo">
            <a href="<?php echo home_url('/'); ?>">
              <?php bloginfo('name'); ?>
            </a>
          </div>
      <?php endif; ?>
      <div class="header-sub">
        <?php bloginfo('description');  ?>
      </div>
⑧「functions.php」で、タイトルの「：」を消す方法   ※デイトラDay(12)参照
      ⭐️snipet・・・my_setup()⇨「pp_func-archive」で登録してある
        function my_archive_title($title) {
          if (is_category()) { // カテゴリーアーカイブの場合
            $title = single_cat_title('', false);
          } elseif (is_tag()) { // タグアーカイブの場合
            $title = single_tag_title('', false);
          } elseif (is_post_type_archive()) { // 投稿タイプのアーカイブの場合
            $title = post_type_archive_title('', false);
          } elseif (is_tax()) { // タームアーカイブの場合
            $title = single_term_title('', false);
          } elseif (is_author()) { // 作者アーカイブの場合
            $title = get_the_author();
          } elseif (is_date()) { // 日付アーカイブの場合
            $title = '';
            if (get_query_var('year')) {
              $title .= get_query_var('year') . '年';
            }
            if (get_query_var('monthnum')) {
              $title .= get_query_var('monthnum') . '月';
            }
            if (get_query_var('day')) {
              $title .= get_query_var('day') . '日';
            }
          }
          return $title;
        };
        add_filter('get_the_archive_title', 'my_archive_title');
    ✅「archive.php」に下記を記述
      <?php
        $title = the_archive_title('', false);
        $title = str_replace('：', '', $title);
        echo $title;
      ?>
⑨共通パーツのテンプレート化                       ※デイトラDay(15)参照
  ⭕️template-partsフォルダを作成
  ⭕️「パーツ名.php」でテンプレートファイルを作成
  ⭕️get_template_part()でテンプレートファイルを読み込む
      get_template_part('template-parts/パーツ名');
        ※拡張子は不要
⑩共通パーツの関数化                             ※デイトラDay(15)参照
  ⭕️「postが所属するカテゴリーの取得」部分を関数化する （⇩の部分）
    <?php
      // カテゴリー１つ目の名前を表示
      $category = get_the_category();
    ?>
    <?php if ($category[0]) : ?>
    <div class="entry-item-tag"><?php echo $category[0]->cat_name; ?></div><!-- /entry-item-tag -->
    <?php endif; ?>
  ⭕️上記のパーツを、functions.phpでパーツ化
    function my_the_post_category($anchor = true) {
      $category = get_the_category();
      if($category[0]) {
        if($anchor) {
          echo '<a href="' . get_category_link($category[0]->term_id) . '">' . $category[0]->cat_name .'</a>';
        } else {
          echo $category[0]->cat_name;
        }
      }
    }
      ※aタグの中の<?php echo ?>は、関数呼び出しの際に<?php ?> で囲む為、'.'でつなげて書けばOK
  ⭕️各.phpのファイルに対し、対象箇所を関数に書き換える
    <?php my_the_post_category(); ?>
    ※引数をtrueにすると、aタグでカテゴリーへのリンクが表示される
  ⭕️タグの関数化
    function my_get_post_tags($id = 0) {
      global $post;
      //引数が渡されなければ投稿IDを見るように設定
      if (0 === $id) {
        $id = $post->ID;
      }
      //タグ一覧を取得
      $tags = get_the_tags($id);
      if ($tags) {
        foreach ($tags as $tag) {
          echo '<div class="entry-tag-item"><a href="' . get_tag_link($tag->term_id) . '">' . $tag->name . '</a></div><!-- /entry-tag-item -->';
        }
      }
    }

18.【共通作業】
  ✅別テンプレートファイルの読み込み
    ⭕️get_template_part('フォルダ名/パーツ名')
  ✅画像表示の調整
    ⭕️get_template_directory_uri()
      🔸変換前・・・ src="img/
      🔸変換後・・・ src="<?= get_template_directory_uri(); ?>/img/
  ✅ヘッダー、フッター、サイドバーの読み込み
    ⭕️get_header()
    ⭕️get_footer()
    ⭕️get_sidebar()
  ✅パンくずリストの書き換え
    ⭕️bcn_display()
  ✅ページネーションの表示
    <?php if (paginate_links()) : ?> //ページネーションがあれば
			<!-- pagination -->
			<div class="pagination">
		    <?=
          paginate_links(
            array(
              'end_size' => 1,
              'mid_size' => 1,
              'prev_next' => true,
              'prev_text' => '<i class="fas fa-angle-left"></i>',
              'next_text' => '<i class="fas fa-angle-right"></i>',
            )
          );
		    ?>
       </div><!-- /pagination -->
		<?php endif; ?>
    【上記解説】
      ⭕️'end_size' => 1,       前へのリンク数 デフォルトは1 両端
                                例)1のとき 1 ... ⑤ ... 10
                                例)2のとき 1 2 ... ⑤ ... 9 10
      ⭕️'mid_size' => 1,       後へのリンク数 デフォルトは2 両側
                                例)1のとき 1 ... 4 ⑤ 6 ... 10
                                例)2のとき 1 ... 3 4 ⑤ 6 7 ... 10
      ⭕️'prev_next' => true,   prev/nextの矢印を表示


  ✅頻出テンプレートタグ一覧
    ⭕️ループ内で頻出
      ・the_title()                     ※投稿タイトルの反映
      ・the_post_thumbnail()            ※サムネイル画像の反映、要条件分岐
      ・the_excerpt()                   ※抜粋文の反映
      ・the_content()                   ※投稿内容の反映
      ・wp_link_pages(array())          ※改ページの反映(ブロックエディタ上の改ページ)
      ・the_permalink()                 ※投稿詳細(single.php)へのリンクの反映
      ・the_time('Y/n/j')               ※投稿日時の反映、要条件分岐
                                        ※datetime="<?php the_time('c'); ?>"
      ・the_modified_time()             ※更新日時の反映、要条件分岐
      ・the_author()                    ※投稿者名の反映
    ⭕️archiveに属さない場合
      ・the_category()                  ※現在の投稿のカテゴリー名を反映
      ・get_the_category()              ※現在の投稿のカテゴリー情報の取得
      ・get_category_link()             ※カテゴリーリンクの取得
      ・the_tags()                      ※現在の投稿のタグ名を反映
      ・get_the_tags()                  ※現在の投稿のタグ情報の取得
      ・get_tag_link()                  ※タグリンクの取得
    ⭕️archiveに属す場合
      ・the_archive_title()             ※アーカイブタイトルの反映(カテゴリー/タグ名)
      ・the_archive_description()       ※アーカイブ説明文の反映
        ※archive ⇨ category,tag,date,authorのみ
        index,front-page,single等はget_the_categoryで代用すること
    ⭕️ページネーションの書き換え
      ・paginate_links(array())         ※ページネーションの反映
    ⭕️トップページリンク
      ・home_url('/')                   ※トップページへ戻る


  ✅各テンプレートタグの使用例
    ⭕️ループ内でのカテゴリー名/リンクの取得方法例
	  	<?php
	  	  $category = get_the_category();
      ?>
	  	<?php if ($category[0]) : ?>
        <div class="entry-item-tag">
          <a class="entry-item-link"> href="<?= get_category_link($category[0]->term_id); ?>">
            <?= $category[0]->cat_name; ?>
          </a>
        </div>
	    <?php endif; ?>
    ⭕️ループ内でのタグ名/リンクの取得方法例
      <?php
        $post_tags = get_the_tags();
      ?>
      <?php if ($post_tags) : ?>
        <?php foreach ($post_tags as $tag) : ?>
          <div class="entry-tag-item">
            <a href="<?= get_tag_link($tag->term_id); ?>">
              <?= $tag->name; ?>
            </a>
          </div>
        <?php endforeach; ?>
      <?php endif; ?>
    ⭕️サムネイルの取得
        <?php if (has_post_thumbnail()) : ?>
          <?php the_post_thumbnail(); ?>
        <?php else : ?>
          <img src="<?= get_template_directory_uri(); ?>/img/entry3.png" alt="">
        <?php endif; ?>
    ⭕️公開日、最終更新日の表示
      ・公開日
        <?php the_time('Y/n/j'); ?>
      ・最終更新日
        <?php the_modified_time('Y/n/j'); ?>
        ※下記のように条件分岐する(更新がなければ表示しない)
          <div class="entry-meta">
            <time class="entry-published" datetime="<?php the_time('c'); ?>">公開日 <?php the_time('Y/n/j'); ?></time>
            <?php if (get_the_modified_time('c') !== get_the_time('c')) : ?>
              <time class="entry-updated" datetime="<?php the_modified_time('c'); ?>">最終更新日 <?php the_modified_time('Y/n/j'); ?></time>
            <?php endif; ?>
          </div><!-- /entry-meta -->
    ⭕️改ページの表示
      ・改ページを表示する場合(デザイン⇨ページ区切り)は、the_content()の後に下記を記述
        <?php
          wp_link_pages(
            array(
              'before' => '<nav class="entry-links">',
              'after'  => '</nav>',
              'link_before' => '',
              'link_after' => '',
              'next_or_number' => 'number',
              'separator' => '',
            )
          );
        ?>
        ※WP管理画面でslugを任意の値に設定してしまうと、ページ移行ができなくなる